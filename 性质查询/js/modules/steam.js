// js/modules/steam.js
export function init(container) {
  container.innerHTML = `
    <div class="module-container">
      <h2>干饱和水蒸气性质查询</h2>

      <div class="form-row">
        <label>温度 (℃):
          <input type="number" id="tempInput" step="1">
        </label>
        <label>压力 (×10⁵ Pa):
          <input type="number" id="pressInput" step="0.001">
        </label>
      </div>

      <div class="form-actions">
        <button type="button" id="queryByTemp">温度查询</button>
        <button type="button" id="queryByPress">压力查询</button>
      </div>

      <table>
        <thead>
          <tr><th>参数</th><th>数值</th></tr>
        </thead>
        <tbody id="resultBody"></tbody>
      </table>
    </div>
  `;

  const tempInput = container.querySelector('#tempInput');
  const pressInput = container.querySelector('#pressInput');
  const tbody = container.querySelector('#resultBody');

  const headers = [
    '温度 (℃)', '压力 (×10⁵ Pa)', '密度 (kg/m³)',
    '焓 (kJ/kg)', '汽化潜热 (kJ/kg)', '定压热容 (kJ/(kg·K))',
    '导热系数 (W/(m·K))', '热扩散系数 (m²/s)', '动力粘度 (Pa·s)',
    '运动粘度 (m²/s)', '普朗特数'
  ];

  const data = [
    [0, 0.00611, 0.004847, 2501.6, 2501.6, 1.8543, 1.83e-2, 7.313e-5, 8.022e-6, 1.655e-6, 0.815],
    [10, 0.01227, 0.009396, 2520.0, 2477.7, 1.8594, 1.88e-2, 3.8813e-5, 8.424e-6, 8.9654e-7, 0.831],
    [20, 0.02338, 0.01729, 2538.0, 2454.3, 1.8661, 1.94e-2, 2.1672e-5, 8.84e-6, 5.099e-7, 0.847],
    [30, 0.04241, 0.03037, 2556.5, 2430.9, 1.8744, 2.00e-2, 1.2651e-5, 9.218e-6, 3.0353e-7, 0.863],
    [40, 0.07375, 0.05116, 2574.5, 2407.0, 1.8853, 2.06e-2, 7.6845e-6, 9.62e-6, 1.8804e-7, 0.883],
    [50, 0.12335, 0.08302, 2592.0, 2382.7, 1.8987, 2.12e-2, 4.8359e-6, 1.022e-5, 1.2072e-7, 0.896],
    [60, 0.19920, 0.1302, 2609.6, 2358.4, 1.9155, 2.19e-2, 3.1555e-6, 1.0424e-5, 8.007e-8, 0.913],
    [70, 0.3116, 0.1982, 2626.8, 2334.1, 1.9364, 2.25e-2, 2.1057e-6, 1.0817e-5, 5.457e-8, 0.930],
    [80, 0.4736, 0.2993, 2643.5, 2309.0, 1.9615, 2.33e-2, 1.4553e-6, 1.1219e-5, 3.825e-8, 0.947],
    [90, 0.7011, 0.4235, 2660.3, 2238.1, 1.9921, 2.40e-2, 1.0222e-6, 1.1621e-5, 2.744e-8, 0.966],
    [100, 1.0130, 0.5977, 2676.2, 2257.1, 2.0281, 2.48e-2, 7.357e-7, 1.2023e-5, 2.012e-8, 0.984],
    [110, 1.4327, 0.8265, 2691.3, 2229.9, 2.0704, 2.56e-2, 5.383e-7, 1.2425e-5, 1.503e-8, 1.00],
    [120, 1.9854, 1.122, 2705.9, 2202.3, 2.1198, 2.65e-2, 4.015e-7, 1.2798e-5, 1.141e-8, 1.02],
    [130, 2.7013, 1.497, 2719.7, 2173.8, 2.1763, 2.76e-2, 3.046e-7, 1.317e-5, 8.8e-9, 1.04],
    [140, 3.614, 1.967, 2733.1, 2144.1, 2.2408, 2.85e-2, 2.338e-7, 1.3543e-5, 6.89e-9, 1.06],
    [150, 4.760, 2.548, 2745.3, 2113.1, 2.3142, 2.97e-2, 1.81e-7, 1.3896e-5, 5.45e-9, 1.08],
    [160, 6.181, 3.260, 2756.6, 2081.3, 2.3974, 3.08e-2, 1.42e-7, 1.4249e-5, 4.37e-9, 1.11],
    [170, 7.920, 4.123, 2767.1, 2047.8, 2.4911, 3.21e-2, 1.125e-7, 1.4612e-5, 3.54e-9, 1.13],
    [180, 10.027, 5.165, 2776.3, 2013.0, 2.5958, 3.36e-2, 9.03e-8, 1.4965e-5, 2.9e-9, 1.15],
    [190, 12.551, 6.397, 2784.2, 1976.6, 2.7126, 3.51e-2, 7.29e-8, 1.5298e-5, 2.39e-9, 1.18],
    [200, 15.549, 7.864, 2790.9, 1938.5, 2.8428, 3.68e-2, 5.92e-8, 1.5651e-5, 1.99e-9, 1.21],
    [210, 19.077, 9.593, 2796.4, 1898.3, 2.9877, 3.87e-2, 4.86e-8, 1.5995e-5, 1.67e-9, 1.24],
    [220, 23.198, 11.62, 2799.7, 1856.4, 3.1497, 4.07e-2, 4.0e-8, 1.6338e-5, 1.41e-9, 1.26],
    [230, 27.976, 14.00, 2801.8, 1811.6, 3.3310, 4.30e-2, 3.32e-8, 1.6701e-5, 1.19e-9, 1.29],
    [240, 33.478, 16.76, 2802.2, 1764.7, 3.5366, 4.54e-2, 2.76e-8, 1.7073e-5, 1.02e-9, 1.33],
    [250, 39.776, 19.99, 2800.6, 1714.5, 3.7723, 4.84e-2, 2.31e-8, 1.7446e-5, 8.73e-10, 1.36],
    [260, 46.943, 23.73, 2796.4, 1661.3, 4.0470, 5.18e-2, 1.94e-8, 1.7848e-5, 7.52e-10, 1.40],
    [270, 55.058, 23.10, 2789.7, 1604.8, 4.3735, 5.55e-2, 1.63e-8, 1.828e-5, 6.51e-10, 1.44],
    [280, 64.202, 33.19, 2780.5, 1543.7, 4.7675, 6.00e-2, 1.37e-8, 1.875e-5, 5.65e-10, 1.49],
    [290, 74.461, 39.16, 2767.5, 1477.5, 5.2528, 6.55e-2, 1.15e-8, 1.927e-5, 4.92e-10, 1.54],
    [300, 85.927, 46.19, 2751.1, 1405.9, 5.8632, 7.22e-2, 9.6e-9, 1.9839e-5, 4.30e-10, 1.61],
    [310, 98.700, 54.54, 2730.2, 1327.6, 6.6503, 8.02e-2, 8.0e-9, 2.0691e-5, 3.80e-10, 1.71],
    [320, 112.89, 64.60, 2703.8, 1241.0, 7.7217, 8.65e-2, 6.2e-9, 2.1691e-5, 3.36e-10, 1.94],
    [330, 128.63, 76.99, 2670.3, 1143.8, 9.3613, 9.61e-2, 4.8e-9, 2.3093e-5, 3.0e-10, 2.24],
    [340, 146.05, 92.76, 2626.0, 1030.8, 12.2103, 1.07e-1, 3.4e-9, 2.4692e-5, 2.66e-10, 2.82],
    [350, 165.35, 113.6, 2567.8, 895.6, 17.1504, 1.19e-1, 2.2e-9, 2.6594e-5, 2.34e-10, 3.83],
    [360, 186.75, 144.1, 2485.3, 721.4, 25.1162, 1.37e-1, 1.4e-9, 2.9193e-5, 2.03e-10, 5.34],
    [370, 210.54, 201.1, 2342.9, 452.6, 81.1025, 1.66e-1, 4.0e-10, 3.3989e-5, 1.69e-10, 15.7]
  ];

  const getCol = i => data.map(row => row[i]);

  function interpolate(x, xArr, yArr) {
    for (let i = 0; i < xArr.length - 1; i++) {
      if (xArr[i] <= x && x <= xArr[i + 1]) {
        const [x0, x1] = [xArr[i], xArr[i + 1]];
        const [y0, y1] = [yArr[i], yArr[i + 1]];
        return y0 + ((x - x0) * (y1 - y0)) / (x1 - x0);
      }
    }
    return null;
  }

  function queryBy(index, value) {
    const xArr = getCol(index);
    const result = headers.map((_, i) => interpolate(value, xArr, getCol(i)));
    if (result.includes(null)) return alert("超出数据范围");
    tbody.innerHTML = headers.map((h, i) =>
      `<tr><td>${h}</td><td>${Number(result[i]).toExponential(6)}</td></tr>`
    ).join('');
  }

  container.querySelector('#queryByTemp').onclick = () => {
    const t = parseFloat(tempInput.value);
    if (isNaN(t)) return alert('请输入有效温度');
    queryBy(0, t);
  };

  container.querySelector('#queryByPress').onclick = () => {
    const p = parseFloat(pressInput.value);
    if (isNaN(p)) return alert('请输入有效压力');
    queryBy(1, p);
  };
}
